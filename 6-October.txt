int swimInWater(vector<vector<int>>& grid) {
        int n=grid.size();
        vector<vector<int>>directions={{1,0},{-1,0},{0,1},{0,-1}};
        vector<vector<bool>> visited(n,vector<bool>(n,false));
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
        pq.push({grid[0][0],0,0});

        int ans=0;
        while(!pq.empty()){
            auto top=pq.top();
            pq.pop();
            int t=top[0], r=top[1], c=top[2];

            if(visited[r][c]){
                continue;
            }
            visited[r][c]=true;

            ans=max(ans,t);

            if(r==n-1 && c==n-1){
                return ans;
            }

            for(auto &dir:directions){
                int nr=r+dir[0],nc=c+dir[1];

                if(nr>=0 && nr<n && nc>=0 && nc<n && !visited[nr][nc]){
                    pq.push({grid[nr][nc],nr,nc});
                }
            }
        }

        return ans;
    }