
///17. Pacific Atlantic Water Flow
//using DFS
vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();

        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));

        // Directions: up, down, left, right
        vector<pair<int,int>> dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};

        // DFS function
        function<void(int,int,vector<vector<bool>>&)> dfs = [&](int r, int c, vector<vector<bool>>& visited) {
            visited[r][c] = true;
            for (auto [dr, dc] : dirs) {
                int nr = r + dr, nc = c + dc;
                if (nr < 0 || nr >= m || nc < 0 || nc >= n) continue;
                if (visited[nr][nc]) continue;
                if (heights[nr][nc] < heights[r][c]) continue;
                dfs(nr, nc, visited);
            }
        };

        // Start DFS from Pacific edges
        for (int i = 0; i < m; ++i) dfs(i, 0, pacific);       // Left edge
        for (int j = 0; j < n; ++j) dfs(0, j, pacific);       // Top edge

        // Start DFS from Atlantic edges
        for (int i = 0; i < m; ++i) dfs(i, n - 1, atlantic);  // Right edge
        for (int j = 0; j < n; ++j) dfs(m - 1, j, atlantic);  // Bottom edge

        // Collect cells that can reach both oceans
        vector<vector<int>> result;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (pacific[i][j] && atlantic[i][j])
                    result.push_back({i, j});
            }
        }

        return result;
    }